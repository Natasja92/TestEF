// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using testef.entityframework;

namespace testef.entityframework.Migrations
{
    [DbContext(typeof(TestEfContext))]
    [Migration("20200226124602_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("testef.models.Education", b =>
                {
                    b.Property<Guid>("EducationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Course")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EducationalInstitute")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EducationId");

                    b.ToTable("Education");

                    b.HasData(
                        new
                        {
                            EducationId = new Guid("99a19480-d320-49fa-8206-64d69d728466"),
                            Category = "IT",
                            Course = "Software Engineering",
                            EducationalInstitute = "Fontys Venlo University of Applied Sciences",
                            EndDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Level = "HBO",
                            StartDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EducationId = new Guid("434cc863-fa52-4ecd-ba38-e9cab5bd76fe"),
                            Category = "IT",
                            Course = "Business Informatics",
                            EducationalInstitute = "Fontys Venlo University of Applied Sciences",
                            EndDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Level = "HBO",
                            StartDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EducationId = new Guid("a7333772-0b12-4218-b23d-1172b4fe5658"),
                            Category = "IT",
                            Course = "Software Engineering",
                            EducationalInstitute = "Zuyd Hogeschool University of Applied Sciences",
                            EndDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Level = "HBO",
                            StartDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EducationId = new Guid("e5e091e1-c9e6-41fb-a942-f6ada86cddc2"),
                            Category = "IT",
                            Course = "Software Engineering",
                            EducationalInstitute = "Fontys Eindhoven University of Applied Sciences",
                            EndDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Level = "HBO",
                            StartDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("testef.models.Person", b =>
                {
                    b.Property<Guid>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BusinessPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CitizenServiceNumber")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonId");

                    b.ToTable("Person");

                    b.HasData(
                        new
                        {
                            PersonId = new Guid("4bce93a4-35ac-42a3-842f-c45ca5f2ed60"),
                            BusinessPhoneNumber = "0612345678",
                            CitizenServiceNumber = 111222333,
                            City = "Maastricht",
                            Email = "HStals@ilionx.com",
                            Name = "Harry Stals",
                            PostalCode = "6371XX"
                        },
                        new
                        {
                            PersonId = new Guid("067efba1-bdbd-4dfa-b944-7b9519e2531f"),
                            BusinessPhoneNumber = "0612345678",
                            CitizenServiceNumber = 111222333,
                            City = "Maastricht",
                            Email = "LCurvers@ilionx.com",
                            Name = "Linda Curvers",
                            PostalCode = "6371XX"
                        },
                        new
                        {
                            PersonId = new Guid("1d40496a-2a34-47b3-8509-9e25dff830dc"),
                            BusinessPhoneNumber = "0612345678",
                            CitizenServiceNumber = 111222333,
                            City = "Maastricht",
                            Email = "DVanHorst@ilionx.com",
                            Name = "Denny van Horst",
                            PostalCode = "6371XX"
                        },
                        new
                        {
                            PersonId = new Guid("fb0c7c49-cb8a-4743-adbd-473943e8e098"),
                            BusinessPhoneNumber = "0612345678",
                            CitizenServiceNumber = 111222333,
                            City = "Maastricht",
                            Email = "KHansen@ilionx.com",
                            Name = "Kyra Hansen",
                            PostalCode = "6371XX"
                        },
                        new
                        {
                            PersonId = new Guid("3c8e38a0-b7a3-4db1-a0d9-be37800f7df9"),
                            BusinessPhoneNumber = "0612345678",
                            CitizenServiceNumber = 111222333,
                            City = "Maastricht",
                            Email = "GJansen@ilionx.com",
                            Name = "Guus Jansen",
                            PostalCode = "6371XX"
                        });
                });

            modelBuilder.Entity("testef.models.PersonEducation", b =>
                {
                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EducationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PersonId", "EducationId");

                    b.HasIndex("EducationId");

                    b.ToTable("PersonEducation");
                });

            modelBuilder.Entity("testef.models.PersonEducation", b =>
                {
                    b.HasOne("testef.models.Education", "Education")
                        .WithMany("PersonEducations")
                        .HasForeignKey("EducationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("testef.models.Person", "Person")
                        .WithMany("PersonEducations")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
